#!/bin/sh
set -eu

with_loop() {
    image=$1 &&
    shift &&
    loop=`losetup --show -f "$image"` &&
    {
        "$@" && :
        : ${err=$?}
        losetup -d "$loop" && :
        return $err
    }
}

with_new_cryptmapper() {
    name=$1 &&
    shift &&
    cryptsetup -v luksFormat "$loop" &&
    cryptsetup open "$loop" "$name" &&
    {
        "$@" && :
        : ${err=$?}
        cryptsetup close "$name" && :
        return $err
    }
}

try_cryptsetup() {
    name=$1 &&
    shift &&
    cryptsetup open "$loop" "$name" &&
    if "$@"; then
        return
    else
        : ${err=$?}
        crypt_setup close "$name" && :
        return $err
    fi
}

# generate a name based on the image's true path;
# here we break the string into several pieces for compatibility reasons (some
# shells don't seem to handle nested backtick and/or quotes properly)
image_to_name() {
    dir=`dirname "$image"`
    base=`basename "$image"`
    dir=`cd "$dir" && pwd -P`
    name=`printf '%s' "$dir/$base" | md5sum | cut -f 1 -d " "`
}

create() {
    if [ $# -lt 2 ] || [ $# -gt 3 ]; then
        usage
    fi &&
    image=$1 &&
    size=$2 &&
    fs=${3-ext4} &&
    image_to_name &&
    dd if=/dev/urandom of="$image" bs=1M count="$size" &&
    with_loop "$image" \
        with_new_cryptmapper "$name" \
            "mkfs.$fs" "/dev/mapper/$name"
}

do_mount() {
    mount "/dev/mapper/$1" "$2" &&
    printf "%s\n" "$2" >"${rundir}/$1.mount"
}

open() {
    if [ $# -ne 2 ]; then
        usage
    fi &&
    image=$1 &&
    mount=$2 &&
    if modprobe loop; then
        image_to_name &&
        mkdir -p -m 700 "$rundir" &&
        loop=`losetup --show -f "$image"` && {
            printf "%s\n" "$loop" >"${rundir}/${name}.loop" &&
            try_cryptsetup "$name" do_mount "$name" "$mount" || {
                : ${err=$?}
                losetup -d "$loop" && :
                return $err
            }
        }
    else
        : ${err=$?}
        cat >&2 <<EOF && :
$prog: can't load kernel module
$prog: are you root? or have you upgraded the kernel recently?
EOF
        return $err
    fi
}

close() {
    if [ $# -ne 1 ]; then
        usage
    fi &&
    image=$1 &&
    image_to_name &&
    loop=`cat "${rundir}/${name}.loop"` &&
    mount=`cat "${rundir}/${name}.mount"` && {
        umount "$mount" && :
        : ${err=$?}
        cryptsetup close "$name" && :
        : ${err=$?}
        losetup -d "$loop" && :
        : ${err=$?}
        rm -f "${rundir}/${name}.loop" "${rundir}/${name}.mount" && :
        : ${err=$?}
        return $err
    }
}

usage() {
    cat >&2 <<EOF
usage:

  $prog create <image> <size-MiB> [<filesystem>]
  $prog open <image> <mount>
  $prog close <image>

EOF
    exit 1;
}

unset err
prog=`basename "$0"`
rundir=${XDG_RUNTIME_DIR-${TMPDIR-/tmp/$USER}}/cryptloop

if [ $# -lt 1 ]; then
    usage
fi

case $1 in
    create|open|close) "$@";;
    *) usage;;
esac
