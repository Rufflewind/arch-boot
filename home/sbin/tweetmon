#!/usr/bin/env python
#
# Monitors for keywords in Tweets and notifies via Pushbullet
#
# sudo pacman -S --needed python-requests-oauthlib python-six
# sudo pip install tweepy
#
# sudo apt-get install tweepy
#
# Example configuration file:
#
#     import json, os, re
#
#     #debug = True # default is False
#
#     # The JSON file should look like this:
#     # {
#     #     "access_token": "<access-token>",
#     #     "access_token_secret": "<access-token-secret>",
#     #     "consumer_key": "<consumer-key>",
#     #     "consumer_secret": "<consumer-secret>"
#     # }
#     with open(os.path.expanduser("~/.twitter_cred.json")) as f:
#         twitter_cred = json.load(f)
#
#     with open(os.path.expanduser("~/.pushbullet_cred.txt")) as f:
#         pushbullet_cred = {"access_token": f.read().strip()}
#
#     #pushbullet_channel_tag = "<channel-tag>" # optional
#
#     def matches_filter(screen_name, text, **kwargs):
#         text = text.lower()
#         return re.search(r"\b(someword|anotherword)", text)
#
from __future__ import unicode_literals
import json, logging, sys
import requests
import tweepy, tweepy.streaming

try:
    from html import unescape as html_unescape
except ImportError:
    try:
        from html.parser import HTMLParser
    except ImportError:
        from HTMLParser import HTMLParser
    html_unescape = HTMLParser().unescape

JSON_ARGS = {
    "indent": 4,
    "separators": (",", ": "),
    "sort_keys": True,
}

def get_user(pushbullet_access_token):
    r = requests.get("https://api.pushbullet.com/v2/users/me",
                     headers={"Access-Token": pushbullet_access_token})
    r.raise_for_status()
    return json.loads(r.content.decode("utf-8"))

def create_push(pushbullet_access_token, title, body,
                url=None, channel_tag=None):
    data = {
        "body": body,
        "title": title,
        "type": "note",
    }
    if url is not None:
        data["type"] = "link"
        data["url"] = url
    if channel_tag is not None:
        data["channel_tag"] = channel_tag
    requests.post(
        "https://api.pushbullet.com/v2/pushes",
        data=json.dumps(data),
        headers={
            "Access-Token": pushbullet_access_token,
            "Content-Type": "application/json",
        },
    ).raise_for_status()

class Cache(object):

    def __init__(self, max_count=65536):
        self._cache = {}                # {Value: Age}
        self._counter = 0               # Age
        self._max_count = max_count

    def check_cache(self, value):
        '''Add the value to cache, and return whether the value was already
        cached.  Also, trim the cache if the cache exceeds max_count.'''
        cached = value in self._cache
        self._cache[value] = self._counter
        self._counter += 1
        if not cached and self._counter > self._max_count:
            vks = sorted(((self._cache[value], value)
                          for value in self._cache),
                         reverse=True)
            # keep up to ceil(max_count / 2) elements
            keep_count = min(len(vks), self._max_count - self._max_count // 2)
            for i in range(keep_count):
                self._cache[vks[i][1]] = i
            for i in range(keep_count, len(vks)):
                del self._cache[vks[i][1]]
            self._counter = keep_count
        return cached

class Listener(tweepy.streaming.StreamListener):

    def __init__(self, config, pushbullet_access_token,
                 pushbullet_channel_tag=None):
        self.config = config
        self.pushbullet_access_token = pushbullet_access_token
        self.pushbullet_channel_tag = pushbullet_channel_tag
        self.status_cache = Cache()

    def on_data(self, data):
        data = json.loads(data)
        if data.get("friends", None):
            return True
        id = data.get("id", None)
        orig_id = data.get("retweeted_status", {}).get("id", id)
        screen_name = data.get("user", {}).get("screen_name", None)
        text = data.get("text", None)
        logging.debug(json.dumps(data, **JSON_ARGS))
        if None in (id, orig_id, screen_name, text):
            return True
        if self.status_cache.check_cache(orig_id):
            return True
        text = html_unescape(text)
        if self.config["matches_filter"](screen_name=screen_name, text=text):
            logging.info("Matched: {0}: {1!r}".format(screen_name, text))
            url = "https://twitter.com/{0}/status/{1}".format(screen_name, id)
            try:
                create_push(self.pushbullet_access_token, screen_name, text,
                            url=url, channel_tag=self.pushbullet_channel_tag)
            except Exception as e:
                logging.warning(
                    "Warning: error while pushing notification: {0}"
                    .format(e))
        return True

def main(argv):

    # load config
    if len(argv) != 2:
        sys.stderr.write("usage: {0} <config-file>\n")
        sys.stderr.flush()
        exit(1)
    config_fn = argv[1]
    config = {
        "pushbullet_channel_tag": None,
    }
    with open(config_fn) as f:
        exec(f.read(), config, config)

    # sanity checks on config file
    pushbullet_access_token = config["pushbullet_cred"]["access_token"]
    pushbullet_channel_tag = config["pushbullet_channel_tag"]
    config["matches_filter"](screen_name="", text="")
    get_user(pushbullet_access_token)

    loglevel = logging.INFO
    if getattr(config, "debug", False):
        loglevel = logging.DEBUG
    logging.basicConfig(format='[%(levelname)s] %(message)s', level=loglevel)

    # start stream listener
    listener = Listener(config=config,
                        pushbullet_access_token=pushbullet_access_token,
                        pushbullet_channel_tag=pushbullet_channel_tag)
    auth = tweepy.OAuthHandler(config["twitter_cred"]["consumer_key"],
                               config["twitter_cred"]["consumer_secret"])
    auth.set_access_token(config["twitter_cred"]["access_token"],
                          config["twitter_cred"]["access_token_secret"])
    stream = tweepy.Stream(auth, listener)
    stream.userstream()
    exit(1)

if __name__ == "__main__":
    main(sys.argv)
