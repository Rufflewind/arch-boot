#!/usr/bin/env python
if __name__ != "__main__":
    raise ImportError("not an importable module")

import argparse, base64, hashlib, re, sys

def write_file(filename, contents, only_if_different=False, safe=True):
    '''Write a file with the given string as contents.

    If `safe` is `True`, the operation is done "as atomically as possible": if
    the filesystem supports atomic rename then it will be performed
    atomically; if the filesystem does not, it will, in the worst case, leave
    behind a temporary file with a similar name that contains the new
    contents.'''

    # encode `contents` into bytes, but only on Python 3
    contents_encode = getattr(contents, "encode", None)
    if contents_encode and getattr(contents, "decode", None):
        import locale
        contents = contents_encode(locale.getpreferredencoding(False))

    # write to temporary file first
    import os, tempfile
    name, ext = os.path.splitext(os.path.basename(filename))
    with tempfile.NamedTemporaryFile(dir=os.path.dirname(filename),
                                     prefix=name + ".",
                                     suffix=ext + ".tmp",
                                     delete=False) as tmp:
        tmp_fn = tmp.name
        try:
            tmp.file.write(contents)
        except:
            os.remove(tmp_fn)
            raise

    # overwrite target file with temporary file
    try:
        os.rename(tmp_fn, filename)
    except OSError:
        import shutil
        os.remove(filename)
        os.rename(tmp_fn, filename)

def base32_hash(data, hasher):
    '''Compute the hash and return the result in base32 without padding.'''
    hasher.update(data)
    return base64.b32encode(hasher.digest()).rstrip(b"=")

try:
    stdin  = sys.stdin.buffer
    stdout = sys.stdout.buffer
except AttributeError:
    stdin  = sys.stdin
    stdout = sys.stdout

opts = argparse.ArgumentParser(description="Add include guards")
opts.add_argument(
    "FILE",
    nargs="?",
    help="input file (defaults to stdin); must be UTF-8/ASCII",
)
opts.add_argument(
    "-i",
    "--in-place",
    action="store_true",
    help="modify the file instead of writing to stdout",
)
opts.add_argument(
    "-f",
    "--force",
    action="store_true",
    help="don't check whether the file already has a guard",
)
args = opts.parse_args()

try:
    if args.FILE:
        with open(args.FILE, "rb") as f:
            input = f.read()
    else:
        input = stdin.read()
except Exception as e:
    sys.stderr.write(str(e) + "\n")
    sys.exit(1)

if not args.FILE and args.in_place:
    sys.stderr.write("can't use --in-place if input file is stdin\n")
    sys.exit(1)

if not args.force and re.match(b"\s*#\s*ifndef.*\n\s*#\s*define", input):
    sys.stderr.write("looks like the file already has a guard\n")
    sys.stderr.write("use --force (-f) to do it anyway\n")
    sys.exit(1)

if not input.endswith(b"\n"):
    input += b"\n"

max_len = 31                            # maximum length of macro name in C89
prefix  = b"G_"
hasher  = hashlib.sha1()
guard   = (prefix + base32_hash(input, hasher))[:max_len]
output  = bytearray()
output += b"#ifndef "
output += guard
output += b"\n#define "
output += guard
output += b"\n"
output += input
output += b"#endif\n"

if args.in_place:
    write_file(args.FILE, output, safe=True)
else:
    stdout.write(output)
