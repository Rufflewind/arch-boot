#!/usr/bin/env python
def generate_guard_macro():
    import random, string
    MAX_LEN  = 31                       # maximum length of macro name in C89
    PREFIX   = "G_"
    SUFFIX   = ""
    assert len(PREFIX) + len(SUFFIX) < MAX_LEN
    return ((PREFIX or random.choice(string.ascii_uppercase)) +
            "".join(random.choice(string.ascii_uppercase + string.digits)
                    for _ in range(MAX_LEN - len(PREFIX) - len(SUFFIX))) +
            SUFFIX)

def argparser():
    import argparse
    p = argparse.ArgumentParser(description="Generate boilerplate for C.")
    p.add_argument(
        "-c",
        "--source",
        action="store_true",
        help="generate a source file (no include guard)",
    )
    return p

TEMPLATE = """
#ifdef __cplusplus
extern "C" {
#endif



#ifdef __cplusplus
}
#endif
"""[1:]

GUARDED_TEMPLATE = """
#ifndef {0}
#define {0}
{1}#endif
"""[1:]

import sys
args = argparser().parse_args()
if args.source:
    s = TEMPLATE
else:
    s = GUARDED_TEMPLATE.format(generate_guard_macro(), TEMPLATE)
sys.stdout.write(s)
