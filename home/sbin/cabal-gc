#!/bin/sh
set -e
usage() {
    cat <<EOF
usage: `basename "$0"` [OPTIONS] [CABALDIR [ARCH-OS-ghc-VERSION]]

A script to help automate the process of removing unregistered Cabal packages.
As a precautionary measure, the script does not actually remove the packages
unless '-r' is specified.  It is highly recommended to run this command
without '-r' first to make sure it doesn't remove anything important.

Note: packages whose name and version coincide with those of a
      globally-installed package are not detected.

Options:

  -h, --help    Display this help
  -r, --remove  Remove the unregistered packages.  It is highly
                recommended to run this command without '-r' first to make
                sure it doesn't remove anything important.

Arguments:

  CABALDIR      Path to the Cabal directory (default if empty: \$HOME/.cabal).
  ARCH          Architecture (e.g. x86_64)
  OS            Operating system (e.g. linux)
  VERSION       Version of GHC (e.g. 7.8.4)

EOF
}

# parse arguments
unset cabaldir
unset subdir
unset remove
parse=t
for arg
do
    if [ "$parse" ]
    then
        case $arg in
            -h|--help)
                usage
                exit 0;;
            -r|--remove)
                remove=t
                continue;;
            --)
                parse=
                continue;;
            -*)
                usage >&2
                exit 1;;
        esac
    fi
    if [ -z "${cabaldir+x}" ]
    then
        cabaldir=$arg
    elif [ -z "${subdir+x}" ]
    then
        subdir=$arg
    else
        usage >&2
        exit 1
    fi
done

# detect reasonable defaults for parameters
if [ -z "$cabaldir" ]
then
    if [ "$HOME" ] && [ -d "$HOME/.cabal" ]
    then
        cabaldir=$HOME/.cabal
    elif [ "$APPDATA" ] && [ -d "$APPDATA/cabal" ]
    then
        cabaldir=$APPDATA/cabal
    else
        prog=`basename "$0"`
        printf >&2 '%s: failed to detect Cabal directory\n' "$prog"
        printf >&2 '%s: must specify CABALDIR argument \n' "$prog"
        exit 1
    fi
elif [ ! -d "$cabaldir" ]
then
    prog=`basename "$0"`
    printf >&2 '%s: directory does not exist: %s\n' "$prog" "$cabaldir"
    exit 1
fi
if [ -z "${subdir+x}" ]
then
    pattern='s/.*[^\.]\([0-9]\{1\}\(\.[0-9]\{1\}\)*\).*/\1/'
    version=`ghc --version | sed "$pattern"`
    if [ -z "$version" ]
    then
        prog=`basename "$0"`
        printf >&2 '%s: failed to detect version of GHC\n' "$prog"
        printf >&2 '%s: must specify VERSION argument \n' "$prog"
        exit 1
    fi
    unset subdir
    for d in "$cabaldir/lib/"*"-ghc-$version"
    do
        if [ ! -d "$d" ]
        then
            continue
        elif [ "${subdir+x}" ]
        then
            prog=`basename "$0"`
            printf >&2 '%s: %s\n' "$prog" "not sure which one to use:"
            for x in "$cabaldir/lib/"*"-ghc-$version"
            do
                printf >&2 '  %s\n' "$x"
            done
            printf >&2 '%s: must specify ARCH-OS-ghc-VERSION argument\n' \
                       "$prog"
            exit 1
        else
            subdir=`basename "$d"`
        fi
    done
    if [ -z "${subdir+x}" ]
    then
        prog=`basename "$0"`
        printf >&2 '%s: %s\n' "$prog" \
                   "can't find package directory for ghc-$version"
        printf >&2 '%s: must specify ARCH-OS-ghc-VERSION argument\n' "$prog"
        exit 1
    fi
fi

# find directories that don't correspond to any registered package
for group in lib share share/doc
do
    dir=$cabaldir/$group/$subdir
    if [ ! -d "$dir" ]
    then
        prog=`basename "$0"`
        printf >&2 '%s: directory does not exist: %s\n' "$prog" "$dir"
        exit 1
    fi
    for pkgpath in "$dir/"*
    do
        if [ ! -d "$pkgpath" ] # guard against empty blobs and unknown files
        then
            continue
        fi
        pkg=`basename "$pkgpath"`
        out=`ghc-pkg --simple-output list "$pkg"`
        if printf '%s' "$out" | grep >/dev/null 2>/dev/null -- "$pkg"
        then :
        elif [ "$remove" ]
        then
            rm -r -- "$pkgpath"
            printf "removed: %s\n" "$pkgpath"
        else
            printf "can be removed: %s\n" "$pkgpath"
        fi
    done
done
