#!/usr/bin/env python3
import itertools, os, re, subprocess, sys

def stat_mtime(filename):
    import decimal
    return decimal.Decimal(os.lstat(filename).st_mtime_ns) / 1000000000

def stat_tz(filename):
    return subprocess.check_output(("stat", "-c", "%y", filename))[-6:]

def make_date(timestamp, tz):
    if tz is None:
        return "@{0}".format(timestamp)
    return "@{0} {1}".format(timestamp, tz)

def parse_git_status(status):
    entries = iter(status.split("\0"))
    for entry in entries:
        if not entry:
            continue
        x = entry[0]
        y = entry[1]
        path = entry[3:]
        path2 = next(entries) if x == "R" else None
        yield (x, y, path, path2)

def commit_or_reset(*args, **kwargs):
    try:
        git_commit(*args, **kwargs)
    except:
        git_reset()
        raise

def git_add(fns):
    fns = list(fns)
    if fns:
        subprocess.check_call(["git", "add", "-A", "--"] + fns)

def git_commit(message, date=None):
    date_args = ["--date=" + make_date(*date)] if date and any(date) else []
    message_args = ["-m", message] if message is not None else []
    subprocess.check_call(["git", "commit"] + date_args + message_args)

def git_reset():
    subprocess.check_call(["git", "reset", "-q"])

def git_status():
    return parse_git_status(subprocess.check_output(["git", "status", "-z"],
                                                    universal_newlines=True))

def get_git_root():
    return subprocess.check_output(["git", "rev-parse", "--show-toplevel"],
                                   universal_newlines=True)[:-1]

def has_upstream():
    with open(os.devnull, "w") as fdevnull:
        p = subprocess.Popen(["git", "rev-parse", "@{u}"],
                             stdout=fdevnull,
                             stderr=fdevnull)
        return not p.wait()

def get_unstaged_changes():
    for x, y, path, _ in git_status():
        if x not in " ?":
            sys.stderr.write("Error: tree contains staged changes.\n")
            exit(1)
        if x == "?":
            continue
        yield path

def get_all_changes(fns):
    git_add(fns)
    try:
        status = git_status()
    finally:
        git_reset()
    for x, y, path, path2 in status:
        if y != " ":
            continue
        yield x, path, path2

def augment_dates(fns):
    dated_fns = []
    undated_fns = []
    for x, fn, fn2 in sorted(fns):
        if x == "D":
            undated_fns.append((None, None, x, fn, fn2))
        else:
            dated_fns.append((stat_mtime(fn), stat_tz(fn), x, fn, fn2))
    dated_fns.sort(key=(lambda x: x[0]))
    return dated_fns + undated_fns

def adjust_filename(rules, fn):
    for pattern, replacement in rules:
        fn = re.sub(pattern, replacement, fn)
    return fn

def adjust_filename_two(rules, srcfn, destfn):
    return "{0} to {1}".format(adjust_filename(rules, srcfn),
                               adjust_filename(rules, destfn))

def load_config(fn):
    import json
    if not os.path.exists(fn) and fn == ".gitsync":
        return []
    with open(fn) as f:
        return json.load(f)

def argparser():
    import argparse
    p = argparse.ArgumentParser()
    p.add_argument("fns", metavar="file", nargs="*")
    p.add_argument("-m", "--message")
    p.add_argument("-o", "--only", action="store_true")
    p.add_argument("-n", "--no-sync", action="store_true")
    p.add_argument("-s", "--simultaneous", action="store_true")
    p.add_argument("--config", default=".gitsync")
    return p

def main():
    args = argparser().parse_args()
    args.fns = [os.path.abspath(fn) for fn in args.fns]
    os.chdir(get_git_root())
    rules = load_config(args.config)

    fns = [] if args.only else get_unstaged_changes()
    fns = augment_dates(get_all_changes(itertools.chain(fns, args.fns)))
    latest_mtime = None
    for mtime, tz, x, fn, fn2 in fns:
        add_fns = [fn]
        if x == "A":
            message = "Add " + adjust_filename(rules, fn)
        elif x == "M":
            message = "Update " + adjust_filename(rules, fn)
        elif x == "D":
            message = "Delete " + adjust_filename(rules, fn)
        elif x == "R":
            message = "Move " + adjust_filename_two(rules, fn2, fn)
            add_fns.append(fn2)
        elif x == "C":
            message = "Copy " + adjust_filename_two(rules, fn2, fn)
        else:
            raise ValueError("Unknown status type: " + repr(x))
        if None not in (mtime, latest_mtime) and latest_mtime < mtime:
            latest_mtime = mtime
        if args.message:
            message += " ({0})".format(args.message)
        git_add(add_fns)
        if not args.simultaneous:
            commit_or_reset(message, date=(mtime, tz))

    if fns and args.simultaneous:
        commit_or_reset(args.message, date=(latest_mtime, None))

    if not args.no_sync and has_upstream():
        subprocess.check_call(["git", "pull", "-r"])
        subprocess.check_call(["git", "push"])

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        exit(1)
    except subprocess.CalledProcessError as e:
        exit(e.returncode)
