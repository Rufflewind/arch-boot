#!/usr/bin/env python
import argparse, os, subprocess, sys

PROG = os.path.basename(sys.argv[0])

opts = argparse.ArgumentParser(
    description="Renames every file using a sed script.",
)
opts.add_argument(
    "SEDSCRIPT",
    nargs=1,
    help="sed script",
)
opts.add_argument(
    "FILE",
    nargs="+",
    help="filename",
)
opts.add_argument(
    "-n", "--dry-run",
    action="store_true",
    help="don't actually rename anything",
)
args = opts.parse_args()

patt = args.SEDSCRIPT[0]
fns = tuple(line for line in args.FILE if line)
abs_fns = tuple(map(os.path.normpath, fns))

inp = "\n".join(abs_fns).encode("utf-8")
try:
    out = subprocess.check_output(("sed", patt), input=inp)
except subprocess.CalledProcessError as e:
    sys.stderr.write("{0}: sed exited with {1}\n".format(PROG, e.returncode))
    sys.exit(1)

new_abs_fns = tuple(line for line in out.decode("utf-8").split("\n") if line)
if len(new_abs_fns) != len(abs_fns):
    sys.stderr.write("{0}: different number of lines: ({1} vs {2})\n{3}"
                     .format(PROG, len(abs_fns), len(new_abs_fns),
                             "".join("  " + x + "\n" for x in new_abs_fns)))
    sys.exit(1)
new_fns = tuple(os.relpath(new_abs_fn) if os.path.isabs(fn) else new_abs_fn
                for fn, new_abs_fn in zip(fns, new_abs_fns))

# sanity checking
for fn, new_fn, new_abs_fn in zip(fns, new_fns, new_abs_fns):
    if not os.path.exists(fn):
        sys.stderr.write("{0}: does not exist:{1}\n".format(PROG, fn))
        sys.exit(1)
    if fn == new_fn:
        continue
    if os.path.exists(new_fn):
        sys.stderr.write("{0}: refusing to overwrite:{1}\n"
                         .format(PROG, new_fn))
        sys.exit(1)
    if new_abs_fns.count(new_abs_fn) > 1:
        sys.stderr.write("{0}: name will clash:{1}\n"
                         .format(PROG, new_fn))
        sys.exit(1)

# actually do the renames
for fn, new_fn in zip(fns, new_fns):
    if fn == new_fn:
        print("{0} (unchanged)".format(fn))
    else:
        if not args.dry_run:
            os.rename(fn, new_fn)
        print("{0} => {1}{2}"
              .format(fn, new_fn, " (dry run)" if args.dry_run else ""))
