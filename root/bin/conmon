#!/bin/sh
#
# NAME
#        conmon - Restart service when connection fails
#
# SYNOPSIS
#        conmon SERVICE INTERVAL
#
# DESCRIPTION
#        Whenever 'host' fails resolve to all of the domains listed below in
#        this script, 'SERVICE.service' is restarted.
#
#        The time between periodic checks is fixed at a minimum of INTERVAL
#        seconds.  In reality, it will probably be longer than that due to
#        latency.  There are also some additional delays between the
#        reconnects to allow the service to act, and also to prevent frequent
#        but futile reconnections when network is down.  These timings can be
#        adjusted via the 'init_pause' and 'max_pause' parameters.
#
#        The script must be run as root as it operates on systemd.  To reduce
#        the danger of this, 'host' is executed under 'nobody'.
#
# OPTIONS
#        SERVICE
#               Service to restart when the connection is down.
#
#        INTERVAL
#               Time between periodic checks in seconds.
#
# EXAMPLE
#        The script itself may be managed via a systemd unit such as:
#
#          # /etc/systemd/system/conmon@.service
#
#          [Unit]
#          Description=Restart service when connection fails
#
#          [Service]
#          ExecStart=/usr/local/bin/conmon %I 60
#          Restart=always
#          RestartSec=600
#
#          [Install]
#          WantedBy=multi-user.target
#
set -eu

if [ $# -ne 2 ]
then
    prog=`basename "$0"`
    printf >&2 "usage: %s SERVICE INTERVAL\n" "$prog"
    exit 2
fi

service=$1
interval=$2

user=nobody
timeout=30
init_pause=30
max_pause=600
pause=$init_pause

# test connectivity using 'curl' as unprivileged $user for extra safety;
# return 37 on immediate failure and 0 on subsequent failures
test_connectivity() {
    cd "${TMP:-/tmp}"
    if sudo -n -u "$user" interval="$interval" timeout="$timeout" sh <<"EOF"

    check_domain() {
        host -W "$timeout" "$1" >/dev/null
    }

    check() {
        check_domain cloudflare.com ||
        check_domain amazon.com
    }

    exitcode=37
    while check
    do
        if [ "$exitcode" -eq 1 ]
        then echo "Connection active."
        fi
        exitcode=0
        sleep "$interval"
    done
    echo "Connection failed."
    exit "$exitcode"

EOF
    then return 0
    else return "$?"
    fi
}

# allow some time for service to initialize
# since it may have been started in parallel
sleep "$pause"
while :
do

    # wait for failures; if it didn't fail immediately, reset the pause timer
    if test_connectivity
    then pause=$init_pause
    else
        exitcode=$?
        if [ "$exitcode" -ne 37 ]
        then exit "$exitcode"
        fi
    fi

    # restart and then pause for some time
    echo "Restarting ..."
    systemctl restart "$service" || :
    printf "Restarted %s.\n" "$service"
    sleep "$pause"

    # double the pause timer, up to some maximum
    pause=`expr "$pause" \* 2`
    if [ "$pause" -gt "$max_pause" ]
    then pause=$max_pause
    fi

done
