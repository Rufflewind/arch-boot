#!/usr/bin/env python3
import argparse, http.server, socketserver, sys

http.server.SimpleHTTPRequestHandler.extensions_map.update({
    ".xml": "text/xml",
    ".xsl": "text/xsl",
})

opts = argparse.ArgumentParser(description="A simple HTTP(S) server.")
opts.add_argument(
    "-s",
    "--secure",
    action="store_true",
)
opts.add_argument(
    "-p",
    "--port",
    default=8080,
    type=int,
)
opts.add_argument(
    "host",
    nargs="?",
    default="localhost",
)
args = opts.parse_args()

addr = (args.host, args.port)
print("serving at {0}:{1}".format(*addr))
if args.secure:
    import os, ssl, subprocess
    certdir = os.path.join(
        os.getenv("XDG_CONFIG_HOME", os.path.expanduser("~/.config")),
        "httpd-simple",
    )
    os.makedirs(certdir, exist_ok=True)
    cert = os.path.join(certdir, "dummy-cert.pem")
    key = os.path.join(certdir, "dummy-cert.key")
    if not (os.path.isfile(cert) and os.path.isfile(key)):
        subprocess.check_call(["openssl", "req", "-x509", "-subj", "/CN=*",
                               "-newkey", "rsa", "-nodes",
                               "-out", cert, "-keyout", key])
    s = http.server.HTTPServer(addr, http.server.CGIHTTPRequestHandler)
    s.socket = ssl.wrap_socket(s.socket, certfile=cert, keyfile=key, server_side=True)
else:
    s = http.server.HTTPServer(addr, http.server.SimpleHTTPRequestHandler)
s.serve_forever()
