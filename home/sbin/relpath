#!/bin/sh
set -e

if [ $# -ne 2 ]
then
    cat >&2 <<EOF
usage: `basename "$0"` TARGET SOURCE

Construct a normalized relative path from the SOURCE directory to the TARGET
file or directory.

The paths are not required to exist physically.
EOF
    exit 1
fi

# check whether `stringB` is not a prefix of `stringA`
#
# inputs:
#   - 1:    `stringA`
#   - 2:    `stringB`
#
not_prefix_of() {
    case $1 in
        "$2"*) return 1;;
        *)     return 0;;
    esac
}

# remove `stringB` from the beginning of `stringA`; if `stringB` is not a
# prefix of `stringA`, `stringA` is returned instead
#
# this is a workaround for the absence of `${var##prefix}` or `${var#prefix}`
# in older shells; note however that this function does not allow patterns
#
# inputs:
#   - 1:    `stringA`
#   - 2:    `stringB`
#
# output:
#   - ret:  `stringA` with possibly `stringB` removed from the beginning
#
strip_prefix() {
    # if the pattern is not a prefix of the original string, return unchanged
    if not_prefix_of "$1" "$2"
    then
        ret=$1
    else
        # obtain substring
        ret=`printf "%s" "$1" | wc -c`
        ret=`expr "$ret" + 1`
        ret=`printf '%s' "$1" | tail -c +"$ret"`
    fi
}

# use realpath if supported (much faster!)
if type >/dev/null 2>&1 realpath
then
    exec realpath -m --relative-to="$2" "$1"
fi

# use more optimal form if supported
if ( _1=abcd && [ ${_1#ab} = cd ] ) >/dev/null 2>&1
then
    strip_prefix() {
        ret=${1#$2}
    }
fi

# make both of them absolute only if at least one of them is absolute
target=$1
common=$2
absolute=
case $target in
    /*) absolute=t;;
esac
case $common in
    /*) absolute=t;;
esac
if [ "$absolute" ]
then
    target=`abspath "$target"`
    common=`abspath "$common"`
else
    target=./`normpath "$target"`
    common=./`normpath "$common"`
fi

# ensure the SOURCE path is a directory
case $common in
    */) ;;
    *) common=$common/;;
esac

# find common prefix
back=
while not_prefix_of "$target" "$common"
do
    common=`dirname "$common"`
    back=../$back
done
strip_prefix "$target" "$common"
normpath "$back$ret"
