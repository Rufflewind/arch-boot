#!/usr/bin/env python

CABAL = "cabal"

def parse_command(args):
    global_flags = []
    command = None
    for i, arg in enumerate(args):
        if arg.startswith("-"):
            global_flags.append(arg)
        else:
            command = arg
            args = args[i + 1:]
            break
    return global_flags, command, args

def split_flags(args, allowed):
    '''([Str], [Char]) -> [Str]'''
    import re
    allowed = frozenset(allowed)
    new_args = []
    for arg in args:
        m = re.match(r"-([^-]+)$", arg)
        if m:
            flags = m.group(1)
            if flags[0] in allowed:
                new_args.extend(preadd_each(m.group(1), "-"))
            else:
                new_args.append(arg)
        else:
            new_args.append(arg)
    return new_args

def replace_flags(args, replacements):
    return [replacements.get(arg, arg) for arg in args]

def parse_subargs(args):
    try:
        i = args.index("--")
    except ValueError:
        i = len(args) + 1
    return args[:i], args[i + 1:]

def preadd_each(xs, prefix):
    return [prefix + x for x in xs]

def process_flags(args):
    args = list(args)

    global_flags, command, args = parse_command(args)
    if command is None:
        return global_flags

    args, subargs = parse_subargs(args)
    args = split_flags(args, "bPt")

    if command == "configure":
        args = replace_flags(args, {
            "-b": "--enable-benchmarks",
            "-P": "--enable-profiling",
            "-t": "--enable-tests",
        })

    elif command == "test":
        args = ["--show-details=streaming"] + args
        args.extend(preadd_each(subargs, "--test-option="))
        subargs = []

    elif command == "bench":
        args.extend(preadd_each(subargs, "--benchmark-option="))
        subargs = []

    return (global_flags + [command] + args +
            (["--"] + subargs if subargs else []))

def path_is_secure(path):
    '''Returns `True` if secure; `False` if insecure; `None` if inaccessible.'''
    import os
    try:
        return not (os.lstat(path).st_mode & 0o077)
    except OSError:
        pass

def mkdir_secure(path):
    import os
    try:
        os.mkdir(path, 0o700)
    except OSError:
        if not path_is_secure(path):
            raise

def override_tmpdir():
    # this way we don't get lots of /tmp/ccXXXXXX files
    import getpass, os, tempfile
    tmpdir = os.path.join(tempfile.gettempdir(),
                          "cabal-" + getpass.getuser())
    os.environ["TMP"] = tmpdir # for Windows
    os.environ["TMPDIR"] = tmpdir
    mkdir_secure(tmpdir)

def main():
    import os, sys
    override_tmpdir()
    args = process_flags(sys.argv[1:])
    os.execlp(CABAL, CABAL, *args)

if __name__ == "__main__":
    main()
