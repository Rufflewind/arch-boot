#!/bin/sh
set -e

if [ $# -eq 0 ]
then
    cat >&2 <<EOF
usage: `basename "$0"` PATH...

Canonicalize each of the PATHs, removing any unnecessary '..', '.', or '/'.

The paths are not required to exist physically.
EOF
    exit 1
fi

# check whether `stringB` is a prefix of `stringA` and
# obtain the length of `stringB`
#
# inputs:
#   - 1:    `stringA`
#   - 2:    `stringB`
#
# output:
#   - ret:  length of `stringB`
#
not_prefix_of() {
    _1=`printf '%s' "$1" | wc -c`
    ret=`printf '%s' "$2" | wc -c`
    # if stringB is longer, return unchanged
    if [ "$_1" -lt "$ret" ]
    then
        return
    fi
    # check whether stringB is a prefix of stringA
    _1=`printf '%s' "$1" | dd 2>/dev/null bs=1 count="$ret"`
    [ "$_1" != "$2" ]
}

# remove `stringB` from the beginning of `stringA`; if `stringB` is not a
# prefix of `stringA`, `stringA` is returned instead
#
# this is a workaround for the absence of `${var##prefix}` or `${var#prefix}`
# in older shells; note however that this function does not allow patterns
#
# inputs:
#   - 1:    `stringA`
#   - 2:    `stringB`
#
# output:
#   - ret:  `stringA` with possibly `stringB` removed from the beginning
#
strip_prefix() {
    # if the pattern is not a prefix of the original string, return unchanged
    if not_prefix_of "$1" "$2"
    then
        ret="$1"
    else
        # obtain substring
        ret=`expr "$ret" + 1`
        ret=`printf '%s' "$1" | tail -c +"$ret"`
    fi
}

for p
do
    # strip '.'
    pattern='\(^\|//*\)\.\(//*\|$\)'
    while printf '%s' "$p" | grep >/dev/null "$pattern"
    do
        p=`printf '%s' "$p" | sed "s:$pattern:\1:g"`
    done
    # strip '..'
    pattern='[^/]*//*\.\.\(//*\|$\)'
    pre=
    while printf '%s' "$p" | grep >/dev/null "$pattern"
    do
        pre=$pre`printf '%s' "$p" | sed 's:^\(\(\.\./\)*\)\(.*\):\1:'`
        strip_prefix "$p" "$pre"
        p=`printf '%s' "$ret" | sed "s:$pattern::"`
    done
    # strip extra '/'
    p=`printf '%s' "$pre$p" | sed 's://*:/:g'`
    # if there's nothing left, add a '.'
    [ "$p" ] || p=.
    printf '%s\n' "$p"
done
