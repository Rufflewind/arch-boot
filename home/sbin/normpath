#!/bin/sh
set -e

if [ $# -eq 0 ]
then
    cat >&2 <<EOF
usage: `basename "$0"` PATH...

Canonicalize each of the PATHs, removing any unnecessary '..', '.', or '/'.

The paths are not required to exist physically.
EOF
    exit 1
fi


# check whether `$2` is a prefix of `$1` and
# store the length of `$2` in the variable `n`
not_prefix_of() {
    n1=`printf '%s' "$1" | wc -c`
    n=`printf '%s' "$2" | wc -c`
    # if the pattern is longer, return unchanged
    if [ "$n1" -lt "$n" ]
    then
        return
    fi
    # if the pattern is not a prefix of the original string, return unchanged
    s=`printf '%s' "$1" | dd 2>/dev/null bs=1 count="$n"`
    [ "$s" != "$2" ]
}

# store in the variable `ret` the result of removing `$2` from the beginning
# of `$1`; if `$2` is not a prefix of `$1`, `$1` is stored instead
#
# this is a workaround for the absence of ${var##prefix} or ${var#prefix} in
# ancient shells; however, this implementation does not accept patterns
strip_prefix() {
    # if the pattern is not a prefix of the original string, return unchanged
    if not_prefix_of "$1" "$2"
    then
        ret="$1"
    else
        # obtain substring
        n=`expr "$n" + 1`
        ret=`printf '%s' "$1" | tail -c +"$n"`
    fi
}

for p
do
    # strip '.'
    pattern='\(^\|//*\)\.\(//*\|$\)'
    while printf '%s' "$p" | grep >/dev/null "$pattern"
    do
        p=`printf '%s' "$p" | sed "s:$pattern:\1:g"`
    done
    # strip '..'
    pattern='[^/]*//*\.\.\(//*\|$\)'
    pre=
    while printf '%s' "$p" | grep >/dev/null "$pattern"
    do
        pre=$pre`printf '%s' "$p" | sed 's:^\(\(\.\./\)*\)\(.*\):\1:'`
        strip_prefix "$p" "$pre"
        p=`printf '%s' "$ret" | sed "s:$pattern::"`
    done
    # strip extra '/'
    p=`printf '%s' "$pre$p" | sed 's://*:/:g'`
    # if there's nothing left, add a '.'
    [ "$p" ] || p=.
    printf '%s\n' "$p"
done
