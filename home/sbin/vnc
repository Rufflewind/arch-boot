#!/bin/sh
#
# Helper script for running VNC over SSH.
#
# It would be nice if TigerVNC supported Unix domain sockets, because then we
# wouldn't have to deal with port allocation!
#
set -eu

usage() {
    cat >&2 <<EOF
usage: `basename "$0"` [-d<display>] [-p<base>] <action> <host> [...]

<action> can be any one of the following:

    server      start the remote VNC server
                (also install and configure if necessary)
    viewer      start VNC viewer client
    kill        stop remote VNC server

Usually, you would run 'vnc server <host>', then 'vnc viewer <host>'.

<display> is a display number without the colon prefix.  Defaults to 1.

The port used for forwarding is derived by adding <display> to <base>.
By default, <base> is 15900.  You can specify preferred ports by saving the
<base> to ~/.vnc/<host>.port_base as a plain text file.

If <action> is viewer, remaining arguments are passed to 'vncviewer'.
EOF
    exit 1
}

if [ $# -lt 2 ]; then
    usage
fi

i=0
display=1
base=15900
base_set=n
while [ $# -gt 0 ] && [ $i -lt 2 ]; do
    case $1 in
        -d[01234576789]*)
            display=`printf "%s" "$1" | sed 's/^..//'`
            ;;
        -p[01234576789]*)
            base=`printf "%s" "$1" | sed 's/^..//'`
            base_set=y
            ;;
        -*)
            usage
            ;;
        *)
            i=`expr $i + 1`
            eval arg"$i"='$1'
            ;;
    esac
    shift
done
action=${arg1}
host=${arg2}
passwd=${HOME}/.vnc/passwd-${host}
if [ "$base_set" = n ] && [ -f "${HOME}/.vnc/port-${host}" ]; then
    base=`cat "${HOME}/.vnc/port-${host}"`
fi
remote_port=`expr 5900 + ${display}`
local_port=`expr "${base}" + ${display}`

case $action in

    server)
        ssh -fN -S none \
            -o BatchMode=yes \
            -o ExitOnForwardFailure=yes \
            -o ServerAliveInterval=20 \
            -L "${local_port}:localhost:${remote_port}" "${host}" || {
            cat >&2 <<EOF
Note: Port forwarding failed, but this may or may not be an actual problem.
EOF
        }
        mkdir -p -m 700 "${HOME}/.vnc" "${HOME}/.cache/vnc"
        cat >"${HOME}/.cache/vnc/server.sh" <<"EOF"
        set -eu
        PATH=$HOME/.local/sbin:$HOME/.local/bin:$PATH

        display=$1

        random_passwd() {
            if type base64 >/dev/null 2>&1; then
                base64 </dev/urandom
            else
                uuencode -m </dev/urandom /dev/stdout | tail -n +2
            fi
        }

        # make sure tigervnc is installed
        type vncserver >/dev/null 2>&1 || {
            e=$?
            echo >&2 "Error: vncserver (tigervnc) is not installed"
            exit $e
        }

        # configure vnc for this user
        [ -f "${HOME}/.vnc/xstartup" ] || {
            mkdir -p -m 700 "${HOME}"/.vnc
            # somehow 'autokill' is not supported as a config parameter
            echo localhost >"${HOME}/.vnc/config"
            random_passwd | dd bs=1 count=8 |
                vncpasswd -f >"${HOME}"/.vnc/passwd
            chmod 0600 "${HOME}/.vnc/passwd"
            cat >"${HOME}/.vnc/xstartup" <<EOF2
#!/bin/sh
exec startxfce4
EOF2
            chmod +x "${HOME}/.vnc/xstartup"
        }
        exec vncserver -autokill -fg :"${display}"
EOF
        ssh "${host}" "mkdir -p -m 700 .cache/vnc"
        scp -pq "${host}:.vnc/passwd" "${passwd}"
        cat >&2 <<EOF
Once the VNC server starts, you may log in via:

    vnc -p${base} viewer ${host}

EOF
        scp -q "${HOME}/.cache/vnc/server.sh" "${host}:.cache/vnc/server.sh"
        ssh -t "${host}" "sh .cache/vnc/server.sh '${display}'"
        ;;

    viewer)
        exec vncviewer -passwd "${passwd}" "localhost:${local_port}" "$@"
        ;;

    kill)
        exec ssh "${host}" "systemctl --user stop vncserver@:${display}"
        ;;

    *)
        usage
        ;;
esac
