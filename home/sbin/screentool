#!/usr/bin/env python
#
# Ninji's ScreenTool for taking and munging screenshots
#
# Dependencies:
#
#   pacman -S imagemagick maim python-gobject slop xclip

# scp destination for uploaded images
IMAGE_PATH_PREFIX = "arctic:/srv/img/"

# prepended to generated URLs
IMAGE_URL_PREFIX = "https://img.wuffs.org/"

EDITOR = "gimp"

import base64, datetime, getpass, os, subprocess, sys, tempfile
import gi
gi.require_version("Gdk", "3.0")
gi.require_version("Gtk", "3.0")
gi.require_version("Notify", "0.7")
from gi.repository import GLib
from gi.repository import Gdk
from gi.repository import GdkPixbuf
from gi.repository import Gtk
from gi.repository import Notify

def mkstempname(*args, **kwargs):
    '''Like tempfile.mkstemp but immediately closes the file handle.'''
    handle, path = tempfile.mkstemp(*args, **kwargs)
    os.close(handle)
    return path

def generate_name():
    time = datetime.datetime.now().strftime("%y-%m-%d.%H-%M-%S.")
    key = base64.b32encode(os.urandom(20)).decode("ascii").lower()
    return time + key

def slop():
    return subprocess.check_output(["slop", "-b", "5", "-p", "0", "-t", "2",
                                    "-g", "0.4", "-c", "0.5,0.5,0.5,1",
                                    "--min=0", "--max=0", "-f", "%g"])

def maim(filename, geometry):
    subprocess.check_call(["maim", "-g", geometry, filename])

class ScreenToolWindow(Gtk.Window):
    def __init__(self, png_path):
        super(ScreenToolWindow, self).__init__(title="ScreenTool",
                                               type_hint="dialog")

        self.edit_button = Gtk.Button(label="Edit")
        self.jpg_button = Gtk.Button(label="Convert to JPG")
        self.upload_button = Gtk.Button(label="Upload")
        self.copy_button = Gtk.Button(label="Copy")

        self.edit_button.connect("clicked", self.on_edit_button_clicked)
        self.jpg_button.connect("clicked", self.on_jpg_button_clicked)
        self.upload_button.connect("clicked", self.on_upload_button_clicked)
        self.copy_button.connect("clicked", self.on_copy_button_clicked)

        self.png_radio = Gtk.RadioButton.new_with_label(None, "PNG")
        self.jpg_radio = Gtk.RadioButton.new_with_label_from_widget(self.png_radio, "JPG")
        self.png_radio.connect("toggled", self.on_radio_toggled)
        self.jpg_radio.set_sensitive(False)

        self.size_label = Gtk.Label(label="___")

        self.previewer = Gtk.Image()
        self.previewer_wrapper = Gtk.ScrolledWindow()
        self.previewer_wrapper.set_size_request(500,400)
        self.previewer_wrapper.add(self.previewer)

        self.top_box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)
        self.top_box.pack_start(self.edit_button, False, False, 0)
        self.top_box.pack_start(self.jpg_button, False, False, 0)
        self.top_box.pack_start(self.upload_button, False, False, 0)
        self.top_box.pack_start(self.copy_button, False, False, 0)
        self.top_box.pack_start(self.png_radio, False, False, 0)
        self.top_box.pack_start(self.jpg_radio, False, False, 0)
        self.top_box.pack_start(self.size_label, False, False, 0)

        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)
        self.box.pack_start(self.top_box, False, False, 0)
        self.box.pack_start(self.previewer_wrapper, True, True, 0)
        self.add(self.box)

        self.stay_around = False
        self.upload_path = None
        self.png_path = png_path
        self.jpg_path = None
        self.show_preview(png_path)

    def show_preview(self, path):
        self.current_preview = path
        self.previewer.set_from_file(path)
        size = os.stat(path).st_size
        self.size_label.set_label("%d KiB" % (size / 1024))

    def reload_preview(self):
        self.show_preview(self.current_preview)

    def on_edit_button_clicked(self, widget):
        subprocess.call([EDITOR, self.current_preview])
        self.reload_preview()

    def on_jpg_button_clicked(self, widget):
        if self.jpg_path is None:
            self.jpg_path = mkstempname(".jpg")
        subprocess.call(["convert", self.png_path, "-quality", "91", self.jpg_path])
        self.jpg_radio.set_sensitive(True)

    def on_upload_button_clicked(self, widget):
        if self.jpg_radio.get_active():
            self.upload_path = self.jpg_path
        else:
            self.upload_path = self.png_path
        if self.upload_path is not None:
            try:
                UPLOAD_REMOTE = os.environ["UPLOAD_REMOTE"]
                UPLOAD_REMOTE_URL = os.environ["UPLOAD_REMOTE_URL"]
            except KeyError:
                msg_box = Gtk.MessageDialog(
                    self,
                    type=Gtk.MessageType.ERROR,
                    buttons=Gtk.ButtonsType.OK,
                    text="UPLOAD_REMOTE and UPLOAD_REMOTE_URL must be set.",
                )
                msg_box.run()
                exit(1)
            name = os.path.basename(self.upload_path)
            subprocess.check_call(["rsync", "-P", "--chmod=644",
                                   self.upload_path,
                                   UPLOAD_REMOTE + ":/var/www/t/" + name])
            url = UPLOAD_REMOTE_URL + "/t/" + name
            clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
            clipboard.set_text(url)
            clipboard.store()

    def on_copy_button_clicked(self, widget):

        count = [0]
        def on_owner_change(clipboard, event):
            print('clipboard.owner-change(%r, %r)' % (clipboard, event))
            count[0] += 1
            if count[0] > 1:
                sys.exit(0)

        pixbuf = GdkPixbuf.Pixbuf.new_from_file(self.png_path)
        clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        clipboard.connect("owner-change", on_owner_change)
        print("hi")
        clipboard.set_image(pixbuf)
        print("bye")
        clipboard.store()
        print("byde")

        self.stay_around = True
        self.close()

    def on_radio_toggled(self, widget):
        if self.jpg_radio.get_active():
            self.show_preview(self.jpg_path)
        else:
            self.show_preview(self.png_path)

def maybe_exit(win):
    if win.stay_around:
        GLib.timeout_add(1000*60, Gtk.main_quit)
    else:
        Gtk.main_quit()

def check_call_with_input(args, input="", **kwargs):
    proc = subprocess.Popen(args, stdin=subprocess.PIPE, **kwargs)
    proc.stdin.write(input)
    proc.stdin.close()
    returncode = proc.wait()
    if returncode != 0:
        raise subprocess.CalledProcessError(returncode=returncode, cmd=args)

def copy(string):
    check_call_with_input(["xclip", "-selection", "clipboard"],
                          input=string.encode("utf-8"))

def mkdirs(path):
    try:
        os.makedirs(path)
    except OSError:
        pass
    if not os.path.isdir(path):
        raise OSError("failed to create directory: {0}".format(path))

def main():

    img_dir = os.path.join(tempfile.gettempdir(),
                           getpass.getuser(),
                           "screenshots")
    os.umask(0o077)
    mkdirs(img_dir)
    os.chmod(img_dir, 0o700)

    img_path = os.path.join(img_dir, generate_name() + ".png")
    maim(img_path, slop())

    win = ScreenToolWindow(img_path)
    win.connect("delete-event", lambda a, b: maybe_exit(win))
    win.show_all()

    Gtk.main()

if __name__ == "__main__":
    try:
        main()
    except subprocess.CalledProcessError as e:
        exit(e.returncode)
